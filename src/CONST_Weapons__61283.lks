// Return the list of available weapons for given level
function getWeaponsForLevel(level) {
    var weapons = [WEAPON_PISTOL];

    if (level >= 5) {
        push(weapons, WEAPON_MACHINE_GUN);
        if (level >= 9) {
            push(weapons, WEAPON_DOUBLE_GUN);
            if (level >= 17) {
                push(weapons, WEAPON_SHOTGUN);
                if (level >= 27) {
                    push(weapons, WEAPON_MAGNUM);
                    if (level >= 40) {
                        push(weapons, WEAPON_LASER);
                        if (level >= 55) {
                            push(weapons, WEAPON_GRENADE_LAUNCHER);
                            if (level >= 90) {
                                push(weapons, WEAPON_FLAME_THROWER);
                                if (level >= 109) {
                                    push(weapons, WEAPON_DESTROYER);
                                    if (level >= 135) {
                                        push(weapons, WEAPON_GAZOR);
                                        if (level >= 170) {
                                            push(weapons, WEAPON_B_LASER);
                                            if (level >= 307) {
                                                push(weapons, WEAPON_ELECTRISOR);
                                                if (level >= 400) {
                                                    push(weapons, WEAPON_M_LASER);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    return weapons;
}


// Returns max weapon range from its ID
function getMinWeaponDamage(weaponId) {

    if (weaponId == WEAPON_PISTOL) {
        return 15;
    } else if (weaponId == WEAPON_MACHINE_GUN) {
        return 20;
    } else if (weaponId == WEAPON_DOUBLE_GUN) {
        return 18;
    } else if (weaponId == WEAPON_SHOTGUN) {
        return 33;
    } else if (weaponId == WEAPON_MAGNUM) {
        return 25;
    } else if (weaponId == WEAPON_LASER) {
        return 43;
    } else if (weaponId == WEAPON_GRENADE_LAUNCHER) {
        return 45;
    } else if (weaponId == WEAPON_FLAME_THROWER) {
        return 35;
    } else if (weaponId == WEAPON_DESTROYER) {
        return 40;
    } else if (weaponId == WEAPON_GAZOR) {
        return 15;
    } else if (weaponId == 13) {
        // WEAPON_B_LASER
        return 50;
    } else if (weaponId == WEAPON_ELECTRISOR) {
        return 70;
    } else if (weaponId == WEAPON_M_LASER) {
        return 90;
    } else {
        return null;
    }
}


// Returns if given weapon can attack target cell from cell
function canAttack(leek, cellFrom, targetCell, weapon) {
    var maxRange = getWeaponMaxScope(weapon);
    var minRange = getWeaponMinScope(weapon);
    var isInline = isInlineWeapon(weapon);

    var distance = getCellDistance(cellFrom, targetCell);
    var los = lineOfSight(cellFrom, targetCell, leek);
    var sameLine = isOnSameLine(cellFrom, targetCell);


    if (distance <= maxRange && distance >= minRange && los) {
        if (isInline) {
            return sameLine;
        } else {
            return true;
        }
    }

    return false;
}


// Get Damage on target leek, accounting shields
function getWeaponDamageOnLeek(weapon, nbTP, leek, targetLeek, strBuff) {
    var minWeapDmg = getMinWeaponDamage(weapon);
    var weapCost = getWeaponCost(weapon);
    var str = getForce(leek) + strBuff;

    var weapDmg = (minWeapDmg) * (1 + str / 100);
    var nbAttacks = weapCost > 0 ? floor(nbTP / weapCost) : 0;

    var dmg = weapDmg * nbAttacks;

    var targetAShield = getAbsoluteShield(targetLeek);
    var targetRshield = getRelativeShield(targetLeek);

    var realDmg = (dmg) * (1 - targetRshield / 100) - targetAShield;

    return realDmg;
}

// Return cells where weapon is useable on target
function getCellsForWeapon(leek, cells, targetCell, weapon) {

    var cw = [];
    var i;
    var c = count(cells);

    for (i = 0; i < c; i++) {
        if(canAttack(leek, cells[i], targetCell, weapon)){
            push(cw, cells[i]);
        }
    }

    return cw;
}


// Return cells where weapon is useable on target
function getCellsForWeapons(leek, cells, targetCell, weapons) {

    var cellsForWeapons = [];
    var i;
    var c = count(weapons);

    for (i = 0; i < c; i++) {
        var weapon = weapons[i];
        cellsForWeapons[weapon] = getCellsForWeapon(leek, cells, targetCell, weapon);
    }

    return cellsForWeapons;
}